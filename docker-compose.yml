services:
  postgres:
    image: postgres:16-alpine
    container_name: "postgres"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-orassistant}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-orassistant_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - orassistant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-orassistant}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
    container_name: "backend"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-orassistant}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-orassistant_db}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - orassistant-network
    healthcheck:
      test: "curl -f http://localhost:8000/healthcheck || exit 1"
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-1200s}
  
  frontend:
    build:
      context: ./frontend/nextjs-frontend
    depends_on:
      backend:
        condition: service_healthy
    container_name: "frontend"
    ports:
      - "3000:3000"
    networks:
      - orassistant-network

networks:
  orassistant-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
