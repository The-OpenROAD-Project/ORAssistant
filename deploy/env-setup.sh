#!/bin/bash

# Environment Setup Script for ORAssistant GKE Deployment
# This script helps configure the .env file and encode secrets

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}ORAssistant Environment Setup${NC}"
echo "=================================="

# Function to base64 encode
encode_secret() {
    local secret="$1"
    if [ -n "$secret" ]; then
        echo -n "$secret" | base64 -w 0
    fi
}

# Function to generate random secret
generate_secret() {
    openssl rand -hex 32
}

# Function to prompt for input
prompt_input() {
    local prompt="$1"
    local var_name="$2"
    local is_secret="${3:-false}"
    
    if [ "$is_secret" = "true" ]; then
        echo -e "${YELLOW}$prompt${NC}"
        read -s input
        echo
    else
        echo -e "${YELLOW}$prompt${NC}"
        read input
    fi
    
    if [ -n "$input" ]; then
        if [ "$is_secret" = "true" ]; then
            encoded=$(encode_secret "$input")
            echo "${var_name}=${encoded}" >> .env
        else
            echo "${var_name}=${input}" >> .env
        fi
    fi
}

# Check if .env already exists
if [ -f ".env" ]; then
    echo -e "${YELLOW}Warning: .env file already exists${NC}"
    read -p "Do you want to overwrite it? (y/N): " overwrite
    if [ "$overwrite" != "y" ] && [ "$overwrite" != "Y" ]; then
        echo "Exiting without changes"
        exit 0
    fi
    rm .env
fi

echo -e "${GREEN}Creating .env file...${NC}"

# Start with basic configuration
cat > .env << 'EOF'
# ORAssistant GKE Deployment Configuration
# Generated by env-setup.sh

EOF

echo -e "${BLUE}1. Project Configuration${NC}"
prompt_input "Enter your GCP Project ID: " "PROJECT_ID"
prompt_input "Enter your domain (e.g., mycompany.com): " "DOMAIN"
prompt_input "Enter GCP region [us-central1]: " "REGION"
if ! grep -q "REGION=" .env; then
    echo "REGION=us-central1" >> .env
fi

# Generate derived values
if grep -q "PROJECT_ID=" .env && grep -q "DOMAIN=" .env; then
    PROJECT_ID=$(grep "PROJECT_ID=" .env | cut -d'=' -f2)
    DOMAIN=$(grep "DOMAIN=" .env | cut -d'=' -f2)
    
    cat >> .env << EOF
CLUSTER_NAME=orassistant-cluster
NAMESPACE=orassistant
PRIMARY_DOMAIN=orassistant.${DOMAIN}
ADMIN_EMAIL=admin@${DOMAIN}
BACKEND_IMAGE=gcr.io/${PROJECT_ID}/orassistant-backend:latest
FRONTEND_IMAGE=gcr.io/${PROJECT_ID}/orassistant-frontend:latest

EOF
fi

echo -e "${BLUE}2. Required API Keys${NC}"
echo -e "${RED}Important: These will be base64 encoded automatically${NC}"

prompt_input "Enter OpenAI API Key (required): " "OPENAI_API_KEY" true
prompt_input "Enter Google API Key: " "GOOGLE_API_KEY" true
prompt_input "Enter HuggingFace Token: " "HUGGINGFACE_TOKEN" true

echo -e "${BLUE}3. Database Configuration${NC}"
prompt_input "Enter MongoDB URI (optional): " "MONGODB_URI" true

echo -e "${BLUE}4. Application Secrets${NC}"
echo -e "${GREEN}Generating random JWT and Session secrets...${NC}"
JWT_SECRET=$(generate_secret)
SESSION_SECRET=$(generate_secret)
JWT_SECRET_B64=$(encode_secret "$JWT_SECRET")
SESSION_SECRET_B64=$(encode_secret "$SESSION_SECRET")

cat >> .env << EOF
JWT_SECRET_KEY=${JWT_SECRET_B64}
SESSION_SECRET=${SESSION_SECRET_B64}

EOF

echo -e "${BLUE}5. Optional API Keys${NC}"
prompt_input "Enter Anthropic API Key (optional): " "ANTHROPIC_API_KEY" true
prompt_input "Enter Cohere API Key (optional): " "COHERE_API_KEY" true

echo -e "${BLUE}6. Google Sheets Integration${NC}"
read -p "Do you have Google Sheets service account credentials? (y/N): " has_sheets
if [ "$has_sheets" = "y" ] || [ "$has_sheets" = "Y" ]; then
    prompt_input "Enter path to service account JSON file: " "SHEETS_FILE"
    if grep -q "SHEETS_FILE=" .env; then
        SHEETS_FILE=$(grep "SHEETS_FILE=" .env | cut -d'=' -f2)
        if [ -f "$SHEETS_FILE" ]; then
            SHEETS_B64=$(cat "$SHEETS_FILE" | base64 -w 0)
            echo "GOOGLE_SHEETS_CREDENTIALS=${SHEETS_B64}" >> .env
            # Remove the file path line
            sed -i '/SHEETS_FILE=/d' .env
        else
            echo -e "${RED}Warning: File not found: $SHEETS_FILE${NC}"
        fi
    fi
fi

# Add default configuration values
cat >> .env << 'EOF'

# Default configuration values
BACKEND_WORKERS=2
LOG_LEVEL=info
ENVIRONMENT=production
BACKEND_CPU_REQUEST=1000m
BACKEND_CPU_LIMIT=2000m
BACKEND_MEMORY_REQUEST=4Gi
BACKEND_MEMORY_LIMIT=8Gi
FRONTEND_CPU_REQUEST=100m
FRONTEND_CPU_LIMIT=500m
FRONTEND_MEMORY_REQUEST=512Mi
FRONTEND_MEMORY_LIMIT=1Gi
BACKEND_MIN_REPLICAS=1
BACKEND_MAX_REPLICAS=3
FRONTEND_MIN_REPLICAS=1
FRONTEND_MAX_REPLICAS=2
STORAGE_SIZE=10Gi
STATIC_IP_NAME=orassistant-ip
MANAGED_CERT_NAME=orassistant-ssl-cert
SSL_PROFILE=MODERN
CERT_MANAGER_VERSION=v1.13.0

EOF

echo -e "${GREEN}✓ .env file created successfully!${NC}"
echo
echo -e "${BLUE}Next steps:${NC}"
echo "1. Review the generated .env file"
echo "2. Add any missing optional configuration"
echo "3. Run: make gke-up"
echo
echo -e "${RED}Security reminder:${NC}"
echo "• Never commit .env to version control"
echo "• Add .env to your .gitignore file"
echo "• Store secrets securely in production"
echo
echo -e "${YELLOW}Configuration summary:${NC}"
if grep -q "PROJECT_ID=" .env; then
    echo "Project ID: $(grep "PROJECT_ID=" .env | cut -d'=' -f2)"
fi
if grep -q "DOMAIN=" .env; then
    echo "Domain: $(grep "DOMAIN=" .env | cut -d'=' -f2)"
fi
if grep -q "PRIMARY_DOMAIN=" .env; then
    echo "Primary Domain: $(grep "PRIMARY_DOMAIN=" .env | cut -d'=' -f2)"
fi
echo "OpenAI API Key: $(if grep -q "OPENAI_API_KEY=" .env && [ "$(grep "OPENAI_API_KEY=" .env | cut -d'=' -f2)" != "" ]; then echo "✓ Configured"; else echo "✗ Missing"; fi)"
echo "Google API Key: $(if grep -q "GOOGLE_API_KEY=" .env && [ "$(grep "GOOGLE_API_KEY=" .env | cut -d'=' -f2)" != "" ]; then echo "✓ Configured"; else echo "✗ Missing"; fi)"
echo "HuggingFace Token: $(if grep -q "HUGGINGFACE_TOKEN=" .env && [ "$(grep "HUGGINGFACE_TOKEN=" .env | cut -d'=' -f2)" != "" ]; then echo "✓ Configured"; else echo "✗ Missing"; fi)"